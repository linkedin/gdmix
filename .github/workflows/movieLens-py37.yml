# This workflow will install Python dependencies, run gdmix end to end on movieLens data
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Gdmix movieLens workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
jobs:
  testbox:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    container:
      image: linkedin/gdmix-dev
    steps:  
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build gdmix-data jar 
        run: |
          ./gradlew shadowJar 
      - name: Install GDMix dependencies and run unit tests
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools pytest
          cd gdmix-trainer && pip install . && pytest && cd ..
          cd gdmix-workflow && pip install . && pytest && cd ..
      - name: Prepare movieLens data
        run: |
          pip install pandas numpy
          python scripts/download_process_movieLens_data.py
      - name: MovieLens logistic regression workflow
        run: |
          python -m gdmixworkflow.main --config_path gdmix-workflow/examples/movielens-100k/lr-movieLens.yaml --jar_path build/gdmix-data-all_2.11/libs/gdmix-data-all_2.11-*.jar
      - name: MovieLens DeText workflow
        run: |
          python -m gdmixworkflow.main --config_path gdmix-workflow/examples/movielens-100k/detext-movieLens.yaml --jar_path build/gdmix-data-all_2.11/libs/gdmix-data-all_2.11-*.jar    
      # We must set the commit status manually
      # Reference: https://github.com/bahmutov/eleventy-example/blob/main/.github/workflows/ci.yml#L27
      - name: Staging Tests âœ…
        if: ${{ success() }}
        # set the merge commit status check
        # using GitHub REST API
        # see https://docs.github.com/en/rest/reference/repos#create-a-commit-status
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "context": "Staging Tests",
            "state": "success",
            "description": "Staging tests passed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
      - name: Staging Tests ðŸš¨
        if: ${{ failure() }}
        # set the merge commit status check
        # using GitHub REST API
        # see https://docs.github.com/en/rest/reference/repos#create-a-commit-status
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "context": "Staging Tests",
            "state": "failure",
            "description": "Staging tests failed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
